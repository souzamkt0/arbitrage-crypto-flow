import { createClient } from '@supabase/supabase-js';

// Configura√ß√µes do Supabase
const SUPABASE_URL = 'https://cbwpghrkfvczjqzefvix.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNid3BnaHJrZnZjempxemVmdml4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTI3MTM4ODMsImV4cCI6MjA2ODI4OTg4M30.DxGYGfC1Ge589yiPCQuC8EyMD_ium4NOpD8coYAtYz8';

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

async function testExistingUser() {
  console.log('üîç AN√ÅLISE COMPLETA DO PROBLEMA:');
  console.log('='.repeat(50));
  
  // 1. Verificar usu√°rio existente
  console.log('\n1Ô∏è‚É£ Verificando usu√°rio existente no banco...');
  const { data: profiles, error: profilesError } = await supabase
    .from('profiles')
    .select('*')
    .eq('username', 'souzamkt0');
  
  if (profilesError) {
    console.error('‚ùå Erro ao buscar perfil:', profilesError.message);
    return;
  }
  
  if (profiles && profiles.length > 0) {
    const profile = profiles[0];
    console.log('‚úÖ Usu√°rio encontrado no banco:');
    console.log(`   - Nome: ${profile.display_name}`);
    console.log(`   - Username: ${profile.username}`);
    console.log(`   - ID: ${profile.id}`);
    console.log(`   - Role: ${profile.role || 'user'}`);
  }
  
  // 2. Verificar sess√£o atual
  console.log('\n2Ô∏è‚É£ Verificando sess√£o atual...');
  const { data: { session }, error: sessionError } = await supabase.auth.getSession();
  
  if (sessionError) {
    console.error('‚ùå Erro ao verificar sess√£o:', sessionError.message);
  } else if (session) {
    console.log('‚úÖ Sess√£o ativa encontrada:');
    console.log(`   - Email: ${session.user.email}`);
    console.log(`   - ID: ${session.user.id}`);
  } else {
    console.log('‚ùå Nenhuma sess√£o ativa');
  }
  
  // 3. Tentar login
  console.log('\n3Ô∏è‚É£ Tentando fazer login...');
  const { data: loginData, error: loginError } = await supabase.auth.signInWithPassword({
    email: 'souzamkt0@gmail.com',
    password: '123456'
  });
  
  if (loginError) {
    console.error('‚ùå Erro no login:', loginError.message);
    
    if (loginError.message.includes('Email not confirmed')) {
      console.log('\nüìß PROBLEMA IDENTIFICADO: Email n√£o confirmado!');
      console.log('\nüîß SOLU√á√ïES POSS√çVEIS:');
      console.log('\nOP√á√ÉO 1 - Desabilitar confirma√ß√£o de email:');
      console.log('1. Acesse: https://supabase.com/dashboard/project/cbwpghrkfvczjqzefvix');
      console.log('2. V√° para Authentication > Settings');
      console.log('3. Desmarque "Enable email confirmations"');
      console.log('4. Clique em "Save"');
      
      console.log('\nOP√á√ÉO 2 - Confirmar email manualmente:');
      console.log('1. Acesse o painel do Supabase');
      console.log('2. V√° para Authentication > Users');
      console.log('3. Encontre o usu√°rio souzamkt0@gmail.com');
      console.log('4. Clique em "Confirm email"');
      
      console.log('\nOP√á√ÉO 3 - Reenviar email de confirma√ß√£o:');
      console.log('1. Use o bot√£o "Resend confirmation" na tela de login');
      console.log('2. Verifique sua caixa de entrada');
    }
  } else {
    console.log('‚úÖ Login realizado com sucesso!');
    console.log(`   - Email: ${loginData.user.email}`);
    console.log(`   - ID: ${loginData.user.id}`);
  }
  
  // 4. Verificar posts da comunidade
  console.log('\n4Ô∏è‚É£ Verificando posts da comunidade...');
  const { data: posts, error: postsError } = await supabase
    .from('community_posts')
    .select('*')
    .limit(3);
  
  if (postsError) {
    console.error('‚ùå Erro ao buscar posts:', postsError.message);
  } else {
    console.log(`‚úÖ ${posts.length} posts encontrados na comunidade`);
  }
  
  console.log('\n' + '='.repeat(50));
  console.log('üìã RESUMO DO PROBLEMA:');
  console.log('‚ùå A p√°gina /community abre e fecha porque:');
  console.log('   1. O usu√°rio n√£o est√° autenticado');
  console.log('   2. O ProtectedRoute detecta isso');
  console.log('   3. Redireciona para /login automaticamente');
  console.log('   4. Isso causa o comportamento de "abrir e fechar"');
  console.log('');
  console.log('‚úÖ SOLU√á√ÉO:');
  console.log('   1. Resolver o problema de autentica√ß√£o');
  console.log('   2. Fazer login com sucesso');
  console.log('   3. A p√°gina /community funcionar√° normalmente');
  console.log('='.repeat(50));
}

testExistingUser().catch(console.error);