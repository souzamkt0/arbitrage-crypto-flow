const { createClient } = require('@supabase/supabase-js');

// Configura√ß√£o do Supabase
const supabaseUrl = 'https://cbwpghrkfvczjqzefvix.supabase.co';
const supabaseKey = process.env.SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNid3BnaHJrZnZjempxemVmdml4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU3OTMxMDksImV4cCI6MjA3MTM2OTEwOX0.YOUR_KEY_HERE';
const supabase = createClient(supabaseUrl, supabaseKey);

async function testarDeposito() {
  console.log('üß™ INICIANDO TESTE DE DEP√ìSITO AUTOM√ÅTICO');
  console.log('=' .repeat(50));

  try {
    // 1. Verificar se a tabela digitopay_transactions existe
    console.log('1Ô∏è‚É£ Verificando tabela digitopay_transactions...');
    const { data: transactions, error: tableError } = await supabase
      .from('digitopay_transactions')
      .select('*')
      .limit(1);

    if (tableError) {
      console.log('‚ùå Erro ao acessar tabela digitopay_transactions:', tableError.message);
      console.log('üí° A tabela pode n√£o existir ou n√£o estar configurada corretamente');
      return;
    }

    console.log('‚úÖ Tabela digitopay_transactions acess√≠vel');

    // 2. Criar um dep√≥sito de teste
    console.log('\n2Ô∏è‚É£ Criando dep√≥sito de teste...');
    const testDeposit = {
      user_id: 'test-user-' + Date.now(),
      trx_id: 'TEST-TRX-' + Date.now(),
      type: 'deposit',
      amount: 10.00,
      amount_brl: 58.50,
      status: 'pending',
      person_name: 'Usu√°rio Teste',
      person_cpf: '12345678901',
      gateway_response: {
        test: true,
        created_at: new Date().toISOString()
      }
    };

    const { data: newDeposit, error: insertError } = await supabase
      .from('digitopay_transactions')
      .insert(testDeposit)
      .select();

    if (insertError) {
      console.log('‚ùå Erro ao criar dep√≥sito de teste:', insertError.message);
      return;
    }

    console.log('‚úÖ Dep√≥sito de teste criado:', newDeposit[0].trx_id);

    // 3. Simular webhook de pagamento
    console.log('\n3Ô∏è‚É£ Simulando webhook de pagamento...');
    
    // Simular dados do webhook do DigitoPay
    const webhookData = {
      id: testDeposit.trx_id,
      status: 'PAID',
      value: testDeposit.amount_brl,
      person: {
        cpf: testDeposit.person_cpf,
        name: testDeposit.person_name
      },
      created_at: new Date().toISOString()
    };

    console.log('üì§ Dados do webhook:', JSON.stringify(webhookData, null, 2));

    // 4. Atualizar status para 'completed'
    console.log('\n4Ô∏è‚É£ Atualizando status para completed...');
    const { data: updatedDeposit, error: updateError } = await supabase
      .from('digitopay_transactions')
      .update({ 
        status: 'completed',
        updated_at: new Date().toISOString(),
        gateway_response: webhookData
      })
      .eq('trx_id', testDeposit.trx_id)
      .select();

    if (updateError) {
      console.log('‚ùå Erro ao atualizar status:', updateError.message);
      return;
    }

    console.log('‚úÖ Status atualizado para completed');

    // 5. Verificar se o dep√≥sito foi processado
    console.log('\n5Ô∏è‚É£ Verificando processamento do dep√≥sito...');
    const { data: finalDeposit, error: finalError } = await supabase
      .from('digitopay_transactions')
      .select('*')
      .eq('trx_id', testDeposit.trx_id)
      .single();

    if (finalError) {
      console.log('‚ùå Erro ao verificar dep√≥sito final:', finalError.message);
      return;
    }

    console.log('üìä Status final do dep√≥sito:', finalDeposit.status);
    console.log('üí∞ Valor:', `$${finalDeposit.amount} USD / R$ ${finalDeposit.amount_brl} BRL`);

    // 6. Verificar se existe l√≥gica de ativa√ß√£o autom√°tica
    console.log('\n6Ô∏è‚É£ Verificando l√≥gica de ativa√ß√£o autom√°tica...');
    
    // Verificar se existe uma fun√ß√£o ou trigger no banco
    const { data: functions, error: funcError } = await supabase
      .rpc('get_functions')
      .select();

    if (funcError) {
      console.log('‚ÑπÔ∏è N√£o foi poss√≠vel verificar fun√ß√µes do banco (normal em ambiente local)');
    } else {
      console.log('üìã Fun√ß√µes dispon√≠veis:', functions);
    }

    // 7. Verificar tabela de perfis para ver se o saldo seria atualizado
    console.log('\n7Ô∏è‚É£ Verificando estrutura da tabela profiles...');
    const { data: profiles, error: profilesError } = await supabase
      .from('profiles')
      .select('user_id, balance, total_profit')
      .limit(1);

    if (profilesError) {
      console.log('‚ùå Erro ao acessar tabela profiles:', profilesError.message);
    } else {
      console.log('‚úÖ Tabela profiles acess√≠vel');
      console.log('üìã Colunas dispon√≠veis: user_id, balance, total_profit');
    }

    console.log('\n' + '=' .repeat(50));
    console.log('üéâ TESTE DE DEP√ìSITO CONCLU√çDO!');
    console.log('\nüìã RESUMO:');
    console.log('‚úÖ Dep√≥sito de teste criado com sucesso');
    console.log('‚úÖ Status atualizado para completed');
    console.log('‚úÖ Estrutura do banco verificada');
    console.log('\nüí° PR√ìXIMOS PASSOS:');
    console.log('1. Verificar se existe uma fun√ß√£o/trigger para atualizar saldo automaticamente');
    console.log('2. Implementar l√≥gica de ativa√ß√£o autom√°tica se necess√°rio');
    console.log('3. Testar com usu√°rio real autenticado');

  } catch (error) {
    console.error('‚ùå Erro geral no teste:', error);
  }
}

// Executar o teste
testarDeposito();
