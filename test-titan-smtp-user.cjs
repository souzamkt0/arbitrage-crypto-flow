// ========================================
// TESTE DE USU√ÅRIO - TITAN EMAIL SMTP
// Teste para verificar se o SMTP est√° funcionando
// ========================================

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente n√£o encontradas!');
  console.log('Certifique-se de que VITE_SUPABASE_URL e VITE_SUPABASE_ANON_KEY est√£o no .env');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

// Fun√ß√£o para testar cadastro de usu√°rio
async function testUserRegistration() {
  console.log('üöÄ Iniciando teste de cadastro com Titan Email SMTP...');
  
  // Email de teste √∫nico
  const testEmail = `teste.titan.${Date.now()}@alphabit.vu`;
  const testPassword = 'TesteTitan123!';
  
  console.log(`üìß Email de teste: ${testEmail}`);
  console.log(`üîê Senha de teste: ${testPassword}`);
  
  try {
    // Tentar criar usu√°rio
    console.log('\n‚è≥ Criando usu√°rio...');
    const { data, error } = await supabase.auth.signUp({
      email: testEmail,
      password: testPassword,
      options: {
        data: {
          full_name: 'Teste Titan SMTP',
          username: `teste_titan_${Date.now()}`
        }
      }
    });
    
    if (error) {
      console.error('‚ùå Erro ao criar usu√°rio:', error.message);
      return false;
    }
    
    console.log('‚úÖ Usu√°rio criado com sucesso!');
    console.log('üìä Dados do usu√°rio:', {
      id: data.user?.id,
      email: data.user?.email,
      email_confirmed_at: data.user?.email_confirmed_at,
      created_at: data.user?.created_at
    });
    
    // Verificar se email foi enviado
    if (data.user && !data.user.email_confirmed_at) {
      console.log('\nüì® Email de confirma√ß√£o deve ter sido enviado!');
      console.log('‚úÖ SMTP Titan Email funcionando - email pendente de confirma√ß√£o');
      console.log('\nüìã Pr√≥ximos passos:');
      console.log('1. Verifique a caixa de entrada do email');
      console.log('2. Clique no link de confirma√ß√£o');
      console.log('3. Execute o SQL para verificar confirma√ß√£o');
    } else if (data.user?.email_confirmed_at) {
      console.log('\n‚úÖ Email j√° confirmado automaticamente!');
    }
    
    return true;
    
  } catch (err) {
    console.error('‚ùå Erro inesperado:', err);
    return false;
  }
}

// Fun√ß√£o para verificar usu√°rios n√£o confirmados
async function checkUnconfirmedUsers() {
  console.log('\nüîç Verificando usu√°rios n√£o confirmados...');
  
  try {
    const { data, error } = await supabase
      .from('auth.users')
      .select('id, email, email_confirmed_at, created_at')
      .is('email_confirmed_at', null)
      .order('created_at', { ascending: false })
      .limit(5);
    
    if (error) {
      console.log('‚ÑπÔ∏è  N√£o foi poss√≠vel acessar auth.users diretamente');
      console.log('Use o SQL Editor para verificar usu√°rios n√£o confirmados');
      return;
    }
    
    if (data && data.length > 0) {
      console.log(`üìä Encontrados ${data.length} usu√°rios n√£o confirmados:`);
      data.forEach((user, index) => {
        console.log(`${index + 1}. ${user.email} - Criado em: ${new Date(user.created_at).toLocaleString()}`);
      });
    } else {
      console.log('‚úÖ Todos os usu√°rios est√£o confirmados!');
    }
    
  } catch (err) {
    console.log('‚ÑπÔ∏è  Use o SQL Editor para verificar usu√°rios n√£o confirmados');
  }
}

// Executar teste
async function runTest() {
  console.log('========================================');
  console.log('üß™ TESTE TITAN EMAIL SMTP - SUPABASE');
  console.log('========================================');
  
  // Verificar usu√°rios n√£o confirmados antes
  await checkUnconfirmedUsers();
  
  // Criar usu√°rio de teste
  const success = await testUserRegistration();
  
  if (success) {
    console.log('\n‚è≥ Aguardando 3 segundos...');
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // Verificar usu√°rios n√£o confirmados depois
    await checkUnconfirmedUsers();
    
    console.log('\n========================================');
    console.log('‚úÖ TESTE CONCLU√çDO');
    console.log('========================================');
    console.log('üìù Resumo:');
    console.log('- Usu√°rio de teste criado');
    console.log('- Email de confirma√ß√£o enviado via Titan SMTP');
    console.log('- Verifique a caixa de entrada para confirmar');
    console.log('\nüîß Para verificar no SQL Editor:');
    console.log('SELECT * FROM auth.users WHERE email_confirmed_at IS NULL ORDER BY created_at DESC;');
  } else {
    console.log('\n‚ùå TESTE FALHOU');
    console.log('Verifique as configura√ß√µes do SMTP no Supabase');
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  runTest().catch(console.error);
}

module.exports = { testUserRegistration, checkUnconfirmedUsers };