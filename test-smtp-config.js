import { createClient } from '@supabase/supabase-js';

// Configura√ß√µes do Supabase
const SUPABASE_URL = 'https://cbwpghrkfvczjqzefvix.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNid3BnaHJrZnZjempxemVmdml4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTI3MTM4ODMsImV4cCI6MjA2ODI4OTg4M30.DxGYGfC1Ge589yiPCQuC8EyMD_ium4NOpD8coYAtYz8';

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

async function testSMTPConfiguration() {
  console.log('üìß Testando Configura√ß√£o SMTP do Supabase...');
  console.log('=' .repeat(60));

  try {
    // 1. Testar signup com email real para verificar SMTP
    console.log('\n1Ô∏è‚É£ Testando envio de email de confirma√ß√£o...');
    const testEmail = `teste.smtp.${Date.now()}@gmail.com`;
    
    const { data: signupData, error: signupError } = await supabase.auth.signUp({
      email: testEmail,
      password: '123456789',
      options: {
        data: {
          first_name: 'Teste',
          last_name: 'SMTP'
        }
      }
    });

    if (signupError) {
      console.error('‚ùå Erro no signup:', signupError.message);
      
      if (signupError.message.includes('Error sending confirmation email')) {
        console.log('\nüîß PROBLEMA IDENTIFICADO: Erro no envio de email');
        console.log('\nüìã POSS√çVEIS CAUSAS:');
        console.log('1. ‚ùå Configura√ß√µes SMTP incorretas');
        console.log('2. ‚ùå Credenciais de email inv√°lidas');
        console.log('3. ‚ùå Servidor SMTP bloqueado');
        console.log('4. ‚ùå Porta SMTP incorreta');
        console.log('5. ‚ùå Autentica√ß√£o SMTP falhando');
        
        console.log('\nüîç VERIFICA√á√ïES NECESS√ÅRIAS:');
        console.log('1. Confirme as configura√ß√µes SMTP no painel');
        console.log('2. Teste as credenciais do provedor de email');
        console.log('3. Verifique se a senha de app est√° correta (Gmail)');
        console.log('4. Confirme se 2FA est√° habilitado (se usando Gmail)');
      }
    } else {
      console.log('‚úÖ Signup realizado com sucesso!');
      
      if (signupData.session) {
        console.log('üéâ SMTP FUNCIONANDO: Usu√°rio logado automaticamente');
        console.log('üìß Email de confirma√ß√£o n√£o √© necess√°rio');
      } else {
        console.log('üìß Email de confirma√ß√£o enviado');
        console.log('‚úÖ SMTP configurado corretamente!');
      }
    }

    // 2. Testar com email existente para verificar reset de senha
    console.log('\n2Ô∏è‚É£ Testando reset de senha (SMTP)...');
    const { error: resetError } = await supabase.auth.resetPasswordForEmail(
      'souzamkt0@gmail.com',
      {
        redirectTo: 'http://localhost:8080/reset-password'
      }
    );

    if (resetError) {
      console.error('‚ùå Erro no reset de senha:', resetError.message);
      
      if (resetError.message.includes('Error sending')) {
        console.log('‚ùå SMTP n√£o est√° funcionando para reset de senha');
      }
    } else {
      console.log('‚úÖ Email de reset enviado com sucesso!');
      console.log('üìß SMTP funcionando para reset de senha');
    }

    // 3. An√°lise das configura√ß√µes
    console.log('\n3Ô∏è‚É£ An√°lise das Configura√ß√µes...');
    console.log('\nüìä RESUMO DO DIAGN√ìSTICO:');
    
    if (signupError && signupError.message.includes('Error sending confirmation email')) {
      console.log('‚ùå Status SMTP: N√ÉO FUNCIONANDO');
      console.log('üîß A√ß√£o necess√°ria: Revisar configura√ß√µes SMTP');
      
      console.log('\nüìã CHECKLIST DE CONFIGURA√á√ÉO SMTP:');
      console.log('\nüîß Para Gmail:');
      console.log('   ‚ñ° Servidor: smtp.gmail.com');
      console.log('   ‚ñ° Porta: 587 (TLS) ou 465 (SSL)');
      console.log('   ‚ñ° Usu√°rio: seu-email@gmail.com');
      console.log('   ‚ñ° Senha: senha de app (n√£o a senha normal)');
      console.log('   ‚ñ° 2FA habilitado na conta Google');
      
      console.log('\nüîß Para outros provedores:');
      console.log('   ‚ñ° SendGrid: smtp.sendgrid.net:587');
      console.log('   ‚ñ° Mailgun: smtp.mailgun.org:587');
      console.log('   ‚ñ° Outlook: smtp-mail.outlook.com:587');
      
      console.log('\nüéØ SOLU√á√ïES ALTERNATIVAS:');
      console.log('1. Desabilitar confirma√ß√£o de email (desenvolvimento)');
      console.log('2. Usar outro provedor SMTP');
      console.log('3. Configurar SendGrid (mais confi√°vel)');
      
    } else {
      console.log('‚úÖ Status SMTP: FUNCIONANDO');
      console.log('üéâ Configura√ß√£o correta!');
    }

    // 4. Instru√ß√µes espec√≠ficas
    console.log('\n4Ô∏è‚É£ Pr√≥ximos Passos...');
    
    if (signupError && signupError.message.includes('Error sending confirmation email')) {
      console.log('\nüîß CORRE√á√ÉO IMEDIATA:');
      console.log('1. Acesse: https://supabase.com/dashboard/project/cbwpghrkfvczjqzefvix');
      console.log('2. V√° para Authentication > Settings > SMTP Settings');
      console.log('3. Revise TODAS as configura√ß√µes');
      console.log('4. Teste com "Send test email"');
      console.log('5. Se n√£o funcionar, desabilite email confirmation temporariamente');
      
      console.log('\nüìß PARA GMAIL - PASSO A PASSO:');
      console.log('1. V√° para https://myaccount.google.com/security');
      console.log('2. Habilite "2-Step Verification"');
      console.log('3. V√° para "App passwords"');
      console.log('4. Gere uma senha de app para "Mail"');
      console.log('5. Use essa senha no Supabase (n√£o a senha normal)');
      
    } else {
      console.log('‚úÖ SMTP configurado corretamente!');
      console.log('üìß Emails de confirma√ß√£o devem funcionar normalmente');
    }

  } catch (error) {
    console.error('‚ùå Erro geral no teste:', error);
  }

  console.log('\n' + '='.repeat(60));
  console.log('üèÅ Teste de SMTP conclu√≠do!');
}

// Executar teste
testSMTPConfiguration().catch(console.error);