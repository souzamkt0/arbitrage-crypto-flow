import { createClient } from '@supabase/supabase-js';

// Configura√ß√µes do Supabase
const SUPABASE_URL = 'https://cbwpghrkfvczjqzefvix.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNid3BnaHJrZnZjempxemVmdml4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTI3MTM4ODMsImV4cCI6MjA2ODI4OTg4M30.DxGYGfC1Ge589yiPCQuC8EyMD_ium4NOpD8coYAtYz8';

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

async function verifyCurrentStatus() {
  console.log('üîç Verificando Status Atual do Sistema...');
  console.log('=' .repeat(60));

  try {
    // 1. Testar login com usu√°rio existente
    console.log('\n1Ô∏è‚É£ Testando login com usu√°rio existente...');
    const { data: loginData, error: loginError } = await supabase.auth.signInWithPassword({
      email: 'souzamkt0@gmail.com',
      password: 'Souza123!'
    });

    if (loginError) {
      console.error('‚ùå Erro no login:', loginError.message);
      
      if (loginError.message.includes('Email not confirmed')) {
        console.log('üìß PROBLEMA: Email n√£o confirmado');
        console.log('üîß SOLU√á√ÉO: Confirmar email manualmente ou desabilitar confirma√ß√£o');
      } else if (loginError.message.includes('Invalid login credentials')) {
        console.log('üîê PROBLEMA: Credenciais inv√°lidas');
        console.log('üîß SOLU√á√ÉO: Verificar email/senha ou resetar senha');
      }
    } else {
      console.log('‚úÖ Login realizado com sucesso!');
      console.log('üë§ Usu√°rio:', loginData.user?.email);
      console.log('üìß Email confirmado:', loginData.user?.email_confirmed_at ? 'SIM' : 'N√ÉO');
    }

    // 2. Verificar configura√ß√£o atual
    console.log('\n2Ô∏è‚É£ Analisando configura√ß√£o atual...');
    
    // Tentar signup com email √∫nico para testar SMTP
    const testEmail = `teste.final.${Date.now()}@example.com`;
    console.log(`üìß Testando com email: ${testEmail}`);
    
    const { data: signupData, error: signupError } = await supabase.auth.signUp({
      email: testEmail,
      password: 'TestPassword123!',
      options: {
        data: {
          first_name: 'Teste',
          last_name: 'Final'
        }
      }
    });

    if (signupError) {
      console.error('‚ùå Erro no signup:', signupError.message);
      
      if (signupError.message.includes('Error sending confirmation email')) {
        console.log('\n‚ùå SMTP N√ÉO EST√Å FUNCIONANDO');
        console.log('üîß As configura√ß√µes SMTP salvas t√™m problemas');
        
        console.log('\nüìã VERIFICA√á√ïES NECESS√ÅRIAS:');
        console.log('1. ‚ùå Servidor SMTP incorreto');
        console.log('2. ‚ùå Porta SMTP incorreta');
        console.log('3. ‚ùå Credenciais inv√°lidas');
        console.log('4. ‚ùå Senha de app incorreta (Gmail)');
        console.log('5. ‚ùå 2FA n√£o habilitado (Gmail)');
        
      } else if (signupError.message.includes('rate limit')) {
        console.log('\n‚è±Ô∏è RATE LIMIT ATINGIDO');
        console.log('‚úÖ Isso indica que o SMTP est√° tentando funcionar');
        console.log('üîß Aguarde alguns minutos e teste novamente');
        
      } else {
        console.log('\n‚ùì Erro desconhecido:', signupError.message);
      }
    } else {
      console.log('‚úÖ Signup realizado com sucesso!');
      
      if (signupData.session) {
        console.log('üéâ CONFIRMA√á√ÉO DESABILITADA: Usu√°rio logado automaticamente');
        console.log('‚úÖ Sistema funcionando sem confirma√ß√£o de email');
      } else {
        console.log('üìß CONFIRMA√á√ÉO HABILITADA: Email de confirma√ß√£o enviado');
        console.log('‚úÖ SMTP funcionando corretamente!');
      }
    }

    // 3. Resumo e recomenda√ß√µes
    console.log('\n3Ô∏è‚É£ Resumo da An√°lise...');
    console.log('\nüìä STATUS ATUAL:');
    
    if (signupError && signupError.message.includes('Error sending confirmation email')) {
      console.log('‚ùå SMTP: N√ÉO FUNCIONANDO');
      console.log('‚ùå Configura√ß√µes: INCORRETAS');
      console.log('üîß A√ß√£o: REVISAR CONFIGURA√á√ïES SMTP');
      
      console.log('\nüéØ SOLU√á√ïES IMEDIATAS:');
      console.log('1. üîß Revisar configura√ß√µes SMTP no painel');
      console.log('2. üìß Testar com "Send test email" no Supabase');
      console.log('3. üîê Verificar senha de app (se Gmail)');
      console.log('4. ‚ö° Desabilitar confirma√ß√£o temporariamente');
      
    } else if (signupError && signupError.message.includes('rate limit')) {
      console.log('‚è±Ô∏è SMTP: PROVAVELMENTE FUNCIONANDO');
      console.log('‚úÖ Configura√ß√µes: CORRETAS');
      console.log('üîß A√ß√£o: AGUARDAR RATE LIMIT');
      
    } else if (signupData?.session) {
      console.log('‚úÖ SISTEMA: FUNCIONANDO');
      console.log('üìß Confirma√ß√£o: DESABILITADA');
      console.log('üéâ A√ß√£o: NENHUMA NECESS√ÅRIA');
      
    } else if (signupData && !signupData.session) {
      console.log('‚úÖ SMTP: FUNCIONANDO PERFEITAMENTE');
      console.log('üìß Confirma√ß√£o: HABILITADA E FUNCIONANDO');
      console.log('üéâ A√ß√£o: SISTEMA PERFEITO');
    }

    // 4. Pr√≥ximos passos espec√≠ficos
    console.log('\n4Ô∏è‚É£ Pr√≥ximos Passos...');
    
    if (loginError && loginError.message.includes('Email not confirmed')) {
      console.log('\nüîß PARA USU√ÅRIOS EXISTENTES:');
      console.log('1. Execute o SQL: fix-email-confirmation-issue.sql');
      console.log('2. Ou confirme emails manualmente no painel');
      console.log('3. Ou desabilite confirma√ß√£o temporariamente');
    }
    
    if (signupError && signupError.message.includes('Error sending confirmation email')) {
      console.log('\nüîß PARA CORRIGIR SMTP:');
      console.log('1. Acesse: https://supabase.com/dashboard/project/cbwpghrkfvczjqzefvix');
      console.log('2. Authentication > Settings > SMTP Settings');
      console.log('3. Clique em "Send test email" para testar');
      console.log('4. Se falhar, revise TODAS as configura√ß√µes');
    }

  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }

  console.log('\n' + '='.repeat(60));
  console.log('üèÅ Verifica√ß√£o conclu√≠da!');
}

// Executar verifica√ß√£o
verifyCurrentStatus().catch(console.error);