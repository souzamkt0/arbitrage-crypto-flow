#!/usr/bin/env node

// Teste completo do sistema PIX autom√°tico e webhook
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://cbwpghrkfvczjqzefvix.supabase.co';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNid3BnaHJrZnZjempxemVmdml4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTI3MTM4ODMsImV4cCI6MjA2ODI4OTg4M30.DxGYGfC1Ge589yiPCQuC8EyMD_ium4NOpD8coYAtYz8';

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function testSistemaPixCompleto() {
  console.log('üß™ TESTE COMPLETO DO SISTEMA PIX AUTOM√ÅTICO');
  console.log('=' .repeat(50));
  
  try {
    const userId = '3df866ff-b7f7-4f56-9690-d12ff9c10944';
    
    // 1. VERIFICAR SALDO ATUAL
    console.log('\n1. üìä VERIFICANDO SALDO ATUAL...');
    const { data: profile } = await supabase
      .from('profiles')
      .select('balance, updated_at')
      .eq('user_id', userId)
      .single();
    
    const saldoAtual = parseFloat(profile?.balance || '0');
    console.log(`üí∞ Saldo atual: R$ ${saldoAtual.toFixed(2)}`);
    console.log(`üìÖ √öltima atualiza√ß√£o: ${profile?.updated_at}`);
    
    // 2. VERIFICAR TRANSA√á√ïES RECENTES
    console.log('\n2. üìã VERIFICANDO TRANSA√á√ïES RECENTES...');
    const { data: transacoes } = await supabase
      .from('digitopay_transactions')
      .select('trx_id, amount, amount_brl, status, created_at, updated_at, callback_data')
      .eq('user_id', userId)
      .order('created_at', { ascending: false })
      .limit(5);
    
    console.log('üìä √öltimas 5 transa√ß√µes:');
    transacoes?.forEach((trx, i) => {
      const hasCallback = trx.callback_data ? '‚úÖ' : '‚ùå';
      const statusIcon = trx.status === 'completed' ? '‚úÖ' : 
                        trx.status === 'pending' ? '‚è≥' : 
                        trx.status === 'cancelled' ? '‚ùå' : '‚ö†Ô∏è';
      
      console.log(`  ${i+1}. ${statusIcon} ${trx.trx_id}`);
      console.log(`     üí∞ R$ ${trx.amount_brl} ($${trx.amount}) - ${trx.status}`);
      console.log(`     üìÖ ${new Date(trx.created_at).toLocaleString('pt-BR')}`);
      console.log(`     üîî Webhook: ${hasCallback}`);
      console.log('');
    });
    
    // 3. VERIFICAR DEP√ìSITOS REGISTRADOS
    console.log('\n3. üí≥ VERIFICANDO DEP√ìSITOS REGISTRADOS...');
    const { data: depositos } = await supabase
      .from('deposits')
      .select('amount_brl, status, created_at')
      .eq('user_id', userId)
      .order('created_at', { ascending: false })
      .limit(5);
    
    console.log('üìä √öltimos 5 dep√≥sitos:');
    depositos?.forEach((dep, i) => {
      const statusIcon = dep.status === 'paid' ? '‚úÖ' : '‚è≥';
      console.log(`  ${i+1}. ${statusIcon} R$ ${dep.amount_brl} - ${dep.status}`);
      console.log(`     üìÖ ${new Date(dep.created_at).toLocaleString('pt-BR')}`);
    });
    
    // 4. VERIFICAR LOGS DE WEBHOOK
    console.log('\n4. üîî VERIFICANDO LOGS DE WEBHOOK...');
    const { data: logs } = await supabase
      .from('digitopay_debug')
      .select('tipo, payload, created_at')
      .order('created_at', { ascending: false })
      .limit(10);
    
    const webhookLogs = logs?.filter(log => log.tipo.includes('webhook')) || [];
    console.log(`üìä √öltimos ${webhookLogs.length} logs de webhook:`);
    
    webhookLogs.forEach((log, i) => {
      const icon = log.tipo.includes('processed') ? '‚úÖ' : 
                   log.tipo.includes('received') ? 'üì®' : 
                   log.tipo.includes('error') ? '‚ùå' : 'üìù';
      
      console.log(`  ${i+1}. ${icon} ${log.tipo}`);
      console.log(`     üìÖ ${new Date(log.created_at).toLocaleString('pt-BR')}`);
      
      if (log.payload?.trxId) {
        console.log(`     üÜî TRX: ${log.payload.trxId}`);
      }
      if (log.payload?.amount) {
        console.log(`     üí∞ Valor: R$ ${log.payload.amount}`);
      }
    });
    
    // 5. AN√ÅLISE DE FUNCIONAMENTO
    console.log('\n5. üîç AN√ÅLISE DE FUNCIONAMENTO...');
    
    const transacoesCompletas = transacoes?.filter(t => t.status === 'completed') || [];
    const transacoesPendentes = transacoes?.filter(t => t.status === 'pending') || [];
    const transacoesComWebhook = transacoes?.filter(t => t.callback_data) || [];
    
    console.log(`üìä Estat√≠sticas:`);
    console.log(`   ‚úÖ Transa√ß√µes completas: ${transacoesCompletas.length}`);
    console.log(`   ‚è≥ Transa√ß√µes pendentes: ${transacoesPendentes.length}`);
    console.log(`   üîî Com webhook: ${transacoesComWebhook.length}`);
    console.log(`   üìä Total de transa√ß√µes: ${transacoes?.length || 0}`);
    
    // 6. VERIFICA√á√ÉO DE PROBLEMAS
    console.log('\n6. ‚ö†Ô∏è VERIFICA√á√ÉO DE PROBLEMAS...');
    
    if (transacoesPendentes.length > 0) {
      console.log('‚ùå PROBLEMA: Transa√ß√µes pendentes encontradas:');
      transacoesPendentes.forEach(trx => {
        console.log(`   - ${trx.trx_id} (R$ ${trx.amount_brl})`);
      });
    } else {
      console.log('‚úÖ Nenhuma transa√ß√£o pendente encontrada');
    }
    
    const transacoesSemWebhook = transacoes?.filter(t => t.status === 'completed' && !t.callback_data) || [];
    if (transacoesSemWebhook.length > 0) {
      console.log('‚ö†Ô∏è ATEN√á√ÉO: Transa√ß√µes completas sem webhook:');
      transacoesSemWebhook.forEach(trx => {
        console.log(`   - ${trx.trx_id} (R$ ${trx.amount_brl})`);
      });
    } else {
      console.log('‚úÖ Todas as transa√ß√µes completas t√™m webhook');
    }
    
    // 7. TESTE DE WEBHOOK
    console.log('\n7. üß™ TESTE DE WEBHOOK...');
    
    const testTrxId = `test_webhook_${Date.now()}`;
    console.log(`üÜî Testando webhook com ID: ${testTrxId}`);
    
    // Criar transa√ß√£o de teste
    const { data: testTransaction, error: createError } = await supabase.functions.invoke('create-digitopay-transaction', {
      body: {
        user_id: userId,
        type: 'deposit',
        amount: 0.50,
        amount_brl: 0.50,
        person_name: 'Teste Webhook',
        person_cpf: '12345678901',
        status: 'pending',
        external_id: testTrxId,
        trx_id: testTrxId
      }
    });
    
    if (createError) {
      console.log('‚ùå Erro ao criar transa√ß√£o de teste:', createError);
    } else {
      console.log('‚úÖ Transa√ß√£o de teste criada');
      
      // Simular webhook
      const webhookPayload = {
        id: testTrxId,
        status: 'paid',
        value: 0.50,
        person: { name: 'Teste Webhook', cpf: '12345678901' },
        paymentMethod: { type: 'PIX' },
        type: 'deposit',
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      };
      
      const webhookResponse = await fetch('https://cbwpghrkfvczjqzefvix.supabase.co/functions/v1/digitopay-deposit-webhook', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(webhookPayload)
      });
      
      const webhookResult = await webhookResponse.json();
      console.log('üì° Resposta do webhook:', webhookResult);
      
      if (webhookResult.success) {
        console.log('‚úÖ Webhook funcionando corretamente!');
      } else {
        console.log('‚ùå Problema no webhook:', webhookResult);
      }
    }
    
    // 8. CONCLUS√ÉO
    console.log('\n8. üìã CONCLUS√ÉO...');
    console.log('=' .repeat(50));
    
    const taxaSucesso = transacoes?.length > 0 ? 
      (transacoesCompletas.length / transacoes.length * 100).toFixed(1) : 0;
    
    console.log(`üìä Taxa de sucesso: ${taxaSucesso}%`);
    console.log(`üí∞ Saldo atual: R$ ${saldoAtual.toFixed(2)}`);
    console.log(`üîî Webhooks funcionando: ${webhookLogs.length > 0 ? '‚úÖ' : '‚ùå'}`);
    
    if (transacoesPendentes.length === 0 && webhookLogs.length > 0) {
      console.log('üéâ SISTEMA PIX AUTOM√ÅTICO: ‚úÖ FUNCIONANDO!');
    } else {
      console.log('‚ö†Ô∏è SISTEMA PIX AUTOM√ÅTICO: ‚ö†Ô∏è PROBLEMAS DETECTADOS');
    }
    
  } catch (error) {
    console.error('üí• Erro no teste:', error);
  }
}

// Executar teste
testSistemaPixCompleto();
